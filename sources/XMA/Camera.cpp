#include <XMA/Camera.hpp>

namespace XMA {

// ---------------------------------------------------------------------------------------------------------------------

Camera::Camera()
        : m_fovy(70.0f), m_aspect(1.0f), m_near(0.2f), m_far(500.0f),
          m_verticalAxis(glm::vec3(0.f, 1.f, 0.f)), m_position(glm::vec3(0.f, 30.f, -30.f))
{}

// ---------------------------------------------------------------------------------------------------------------------

Camera::~Camera()
{}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setFovy(float value)
{
    m_fovy = value;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setAspect(float value)
{
    m_aspect = value;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setAspect(const glm::vec2 &v)
{
    m_aspect = v.x / v.y;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setNear(float value)
{
    m_near = value;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setFar(float value)
{
    m_far = value;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setPosition(const glm::vec3& position)
{
    m_position = position;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setTarget(const glm::vec3& target)
{
    m_target = target;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

Camera& Camera::setVerticalAxis(const glm::vec3& verticalAxis)
{
    m_verticalAxis = verticalAxis;
    return *this;
}

// ---------------------------------------------------------------------------------------------------------------------

glm::vec3 Camera::getPosition() const
{
    return m_position;
}

// ---------------------------------------------------------------------------------------------------------------------

glm::vec3 Camera::getTarget() const
{
    return m_target;
}

// ---------------------------------------------------------------------------------------------------------------------

glm::vec3 Camera::getVerticalAxis() const
{
    return m_verticalAxis;
}

// ---------------------------------------------------------------------------------------------------------------------

glm::vec3 Camera::getDirection() const
{
    return glm::normalize(m_target - m_position);
}

// ---------------------------------------------------------------------------------------------------------------------

float Camera::getFovy() const
{
    return m_fovy;
}

// ---------------------------------------------------------------------------------------------------------------------

float Camera::getAspect() const
{
    return m_aspect;
}

// ---------------------------------------------------------------------------------------------------------------------

float Camera::getNear() const
{
    return m_near;
}

// ---------------------------------------------------------------------------------------------------------------------

float Camera::getFar() const
{
    return m_far;
}

// ---------------------------------------------------------------------------------------------------------------------

glm::mat4 Camera::getMatrix() const
{
    return (
            glm::perspective(m_fovy, m_aspect, m_near, m_far) *
            glm::lookAt(m_position, m_target, m_verticalAxis)
    );
}

// ---------------------------------------------------------------------------------------------------------------------

}